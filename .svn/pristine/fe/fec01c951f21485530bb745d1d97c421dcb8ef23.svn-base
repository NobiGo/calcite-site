<!DOCTYPE HTML>
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc -->
<title>RexTransformerTest (Calcite 1.18.0 Test API)</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" type="text/css" href="../../../../stylesheet.css" title="Style">
<link rel="stylesheet" type="text/css" href="../../../../jquery/jquery-ui.css" title="Style">
<script type="text/javascript" src="../../../../script.js"></script>
<script type="text/javascript" src="../../../../jquery/jszip/dist/jszip.min.js"></script>
<script type="text/javascript" src="../../../../jquery/jszip-utils/dist/jszip-utils.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="../../../../jquery/jszip-utils/dist/jszip-utils-ie.min.js"></script>
<![endif]-->
<script type="text/javascript" src="../../../../jquery/jquery-3.3.1.js"></script>
<script type="text/javascript" src="../../../../jquery/jquery-migrate-3.0.1.js"></script>
<script type="text/javascript" src="../../../../jquery/jquery-ui.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="RexTransformerTest (Calcite 1.18.0 Test API)";
        }
    }
    catch(err) {
    }
//-->
var data = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":9};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
var pathtoroot = "../../../../";
var useModuleDirectories = true;
loadScripts(document, 'script');</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<header role="banner">
<nav role="navigation">
<div class="fixedNav">
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a id="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../index.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/RexTransformerTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-all.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../../allclasses.html">All&nbsp;Classes</a></li>
</ul>
<ul class="navListSearch">
<li><label for="search">SEARCH:</label>
<input type="text" id="search" value="search" disabled="disabled">
<input type="reset" id="reset" value="reset" disabled="disabled">
</li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
</div>
<div class="navPadding">&nbsp;</div>
<script type="text/javascript"><!--
$('.navPadding').css('padding-top', $('.fixedNav').css("height"));
//-->
</script>
</nav>
</header>
<!-- ======== START OF CLASS DATA ======== -->
<main role="main">
<div class="header">
<div class="subTitle"><span class="packageLabelInType">Package</span>&nbsp;<a href="package-summary.html">org.apache.calcite.test</a></div>
<h2 title="Class RexTransformerTest" class="title">Class RexTransformerTest</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>org.apache.calcite.test.RexTransformerTest</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<pre>public class <span class="typeNameLabel">RexTransformerTest</span>
extends java.lang.Object</pre>
<div class="block">Tests transformations on rex nodes.</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Field</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) org.apache.calcite.rel.type.RelDataType</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#boolRelDataType">boolRelDataType</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#falseRex">falseRex</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) org.apache.calcite.rex.RexBuilder</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#rexBuilder">rexBuilder</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#trueRex">trueRex</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) org.apache.calcite.rel.type.RelDataTypeFactory</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#typeFactory">typeFactory</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#x">x</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>(package private) org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#y">y</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>(package private) org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#z">z</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Constructor</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<th class="colConstructorName" scope="row"><code><span class="memberNameLink"><a href="#%3Cinit%3E()">RexTransformerTest</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- ========== METHOD SUMMARY =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Method</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#and(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">and</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
   org.apache.calcite.rex.RexNode&nbsp;a1)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>(package private) void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#check(java.lang.Boolean,org.apache.calcite.rex.RexNode,java.lang.String)">check</a></span>&#8203;(java.lang.Boolean&nbsp;encapsulateType,
     org.apache.calcite.rex.RexNode&nbsp;node,
     java.lang.String&nbsp;expected)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>private org.apache.calcite.plan.RelOptUtil.Logic</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#deduceLogic(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode,org.apache.calcite.plan.RelOptUtil.Logic)">deduceLogic</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;root,
           org.apache.calcite.rex.RexNode&nbsp;seek,
           org.apache.calcite.plan.RelOptUtil.Logic&nbsp;logic)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#equals(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">equals</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
      org.apache.calcite.rex.RexNode&nbsp;a1)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#greaterThan(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">greaterThan</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
           org.apache.calcite.rex.RexNode&nbsp;a1)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#greaterThanOrEqual(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">greaterThanOrEqual</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
                  org.apache.calcite.rex.RexNode&nbsp;a1)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isFalse(org.apache.calcite.rex.RexNode)">isFalse</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;node)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isNotNull(org.apache.calcite.rex.RexNode)">isNotNull</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isTrue(org.apache.calcite.rex.RexNode)">isTrue</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;node)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#lessThan(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">lessThan</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
        org.apache.calcite.rex.RexNode&nbsp;a1)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#lessThanOrEqual(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">lessThanOrEqual</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
               org.apache.calcite.rex.RexNode&nbsp;a1)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#not(org.apache.calcite.rex.RexNode)">not</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#notEquals(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">notEquals</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
         org.apache.calcite.rex.RexNode&nbsp;a1)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#or(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">or</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
  org.apache.calcite.rex.RexNode&nbsp;a1)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>private org.apache.calcite.rex.RexNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#plus(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">plus</a></span>&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
    org.apache.calcite.rex.RexNode&nbsp;a1)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setUp()">setUp</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testDown()">testDown</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testExactLiteral()">testExactLiteral</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-814">[CALCITE-814]
 RexBuilder reverses precision and scale of DECIMAL literal</a>
 and
 <a href="https://issues.apache.org/jira/browse/CALCITE-1344">[CALCITE-1344]
 Incorrect inferred precision when BigDecimal value is less than 1</a>.</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testLogic()">testLogic</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for <code>LogicVisitor</code>.</div>
</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testMixed1()">testMixed1</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testMixed2()">testMixed2</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testMixed3()">testMixed3</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testNonBooleans()">testNonBooleans</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testOptimizeNonNullLiterals()">testOptimizeNonNullLiterals</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testOrUnchanged()">testOrUnchanged</a></span>()</code></th>
<td class="colLast">
<div class="block">the or operator should pass through unchanged since e.g.</div>
</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testPreTests()">testPreTests</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i26" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSimpleAnd()">testSimpleAnd</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i27" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSimpleEquals()">testSimpleEquals</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i28" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSimpleGreaterEquals()">testSimpleGreaterEquals</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i29" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSimpleGreaterThan()">testSimpleGreaterThan</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i30" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSimpleIdentifier()">testSimpleIdentifier</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i31" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSimpleLessEqual()">testSimpleLessEqual</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i32" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSimpleLessThan()">testSimpleLessThan</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i33" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSimpleNotEquals()">testSimpleNotEquals</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i34" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSplitJoinCondition()">testSplitJoinCondition</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-833">[CALCITE-833]
 RelOptUtil.splitJoinCondition attempts to split a Join-Condition which
 has a remaining condition</a>.</div>
</td>
</tr>
<tr id="i35" class="rowColor">
<td class="colFirst"><code>private static org.apache.calcite.rel.RelNode</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#toRel(java.lang.String)">toRel</a></span>&#8203;(java.lang.String&nbsp;sql)</code></th>
<td class="colLast">
<div class="block">Converts a SQL string to a relational expression using mock schema.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a id="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a id="rexBuilder">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>rexBuilder</h4>
<pre>org.apache.calcite.rex.RexBuilder rexBuilder</pre>
</li>
</ul>
<a id="x">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>x</h4>
<pre>org.apache.calcite.rex.RexNode x</pre>
</li>
</ul>
<a id="y">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>y</h4>
<pre>org.apache.calcite.rex.RexNode y</pre>
</li>
</ul>
<a id="z">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>z</h4>
<pre>org.apache.calcite.rex.RexNode z</pre>
</li>
</ul>
<a id="trueRex">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>trueRex</h4>
<pre>org.apache.calcite.rex.RexNode trueRex</pre>
</li>
</ul>
<a id="falseRex">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>falseRex</h4>
<pre>org.apache.calcite.rex.RexNode falseRex</pre>
</li>
</ul>
<a id="boolRelDataType">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>boolRelDataType</h4>
<pre>org.apache.calcite.rel.type.RelDataType boolRelDataType</pre>
</li>
</ul>
<a id="typeFactory">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>typeFactory</h4>
<pre>org.apache.calcite.rel.type.RelDataTypeFactory typeFactory</pre>
</li>
</ul>
</li>
</ul>
</section>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a id="&lt;init&gt;()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>RexTransformerTest</h4>
<pre>public&nbsp;RexTransformerTest()</pre>
</li>
</ul>
</li>
</ul>
</section>
<!-- ============ METHOD DETAIL ========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a id="toRel(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toRel</h4>
<pre class="methodSignature">private static&nbsp;org.apache.calcite.rel.RelNode&nbsp;toRel&#8203;(java.lang.String&nbsp;sql)</pre>
<div class="block">Converts a SQL string to a relational expression using mock schema.</div>
</li>
</ul>
<a id="setUp()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setUp</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setUp()</pre>
</li>
</ul>
<a id="testDown()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testDown</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testDown()</pre>
</li>
</ul>
<a id="check(java.lang.Boolean,org.apache.calcite.rex.RexNode,java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>check</h4>
<pre class="methodSignature">void&nbsp;check&#8203;(java.lang.Boolean&nbsp;encapsulateType,
           org.apache.calcite.rex.RexNode&nbsp;node,
           java.lang.String&nbsp;expected)</pre>
</li>
</ul>
<a id="lessThan(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>lessThan</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;lessThan&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
                                                org.apache.calcite.rex.RexNode&nbsp;a1)</pre>
</li>
</ul>
<a id="lessThanOrEqual(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>lessThanOrEqual</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;lessThanOrEqual&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
                                                       org.apache.calcite.rex.RexNode&nbsp;a1)</pre>
</li>
</ul>
<a id="greaterThan(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>greaterThan</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;greaterThan&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
                                                   org.apache.calcite.rex.RexNode&nbsp;a1)</pre>
</li>
</ul>
<a id="greaterThanOrEqual(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>greaterThanOrEqual</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;greaterThanOrEqual&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
                                                          org.apache.calcite.rex.RexNode&nbsp;a1)</pre>
</li>
</ul>
<a id="equals(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>equals</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;equals&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
                                              org.apache.calcite.rex.RexNode&nbsp;a1)</pre>
</li>
</ul>
<a id="notEquals(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>notEquals</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;notEquals&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
                                                 org.apache.calcite.rex.RexNode&nbsp;a1)</pre>
</li>
</ul>
<a id="and(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>and</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;and&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
                                           org.apache.calcite.rex.RexNode&nbsp;a1)</pre>
</li>
</ul>
<a id="or(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>or</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;or&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
                                          org.apache.calcite.rex.RexNode&nbsp;a1)</pre>
</li>
</ul>
<a id="not(org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>not</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;not&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0)</pre>
</li>
</ul>
<a id="plus(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>plus</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;plus&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0,
                                            org.apache.calcite.rex.RexNode&nbsp;a1)</pre>
</li>
</ul>
<a id="isNotNull(org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isNotNull</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;isNotNull&#8203;(org.apache.calcite.rex.RexNode&nbsp;a0)</pre>
</li>
</ul>
<a id="isFalse(org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isFalse</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;isFalse&#8203;(org.apache.calcite.rex.RexNode&nbsp;node)</pre>
</li>
</ul>
<a id="isTrue(org.apache.calcite.rex.RexNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isTrue</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.rex.RexNode&nbsp;isTrue&#8203;(org.apache.calcite.rex.RexNode&nbsp;node)</pre>
</li>
</ul>
<a id="testPreTests()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testPreTests</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testPreTests()</pre>
</li>
</ul>
<a id="testNonBooleans()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testNonBooleans</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testNonBooleans()</pre>
</li>
</ul>
<a id="testOrUnchanged()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testOrUnchanged</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testOrUnchanged()</pre>
<div class="block">the or operator should pass through unchanged since e.g. x OR y should
 return true if x=null and y=true if it was transformed into something
 like (x IS NOT NULL) AND (y IS NOT NULL) AND (x OR y) an incorrect result
 could be produced</div>
</li>
</ul>
<a id="testSimpleAnd()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSimpleAnd</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSimpleAnd()</pre>
</li>
</ul>
<a id="testSimpleEquals()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSimpleEquals</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSimpleEquals()</pre>
</li>
</ul>
<a id="testSimpleNotEquals()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSimpleNotEquals</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSimpleNotEquals()</pre>
</li>
</ul>
<a id="testSimpleGreaterThan()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSimpleGreaterThan</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSimpleGreaterThan()</pre>
</li>
</ul>
<a id="testSimpleGreaterEquals()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSimpleGreaterEquals</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSimpleGreaterEquals()</pre>
</li>
</ul>
<a id="testSimpleLessThan()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSimpleLessThan</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSimpleLessThan()</pre>
</li>
</ul>
<a id="testSimpleLessEqual()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSimpleLessEqual</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSimpleLessEqual()</pre>
</li>
</ul>
<a id="testOptimizeNonNullLiterals()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testOptimizeNonNullLiterals</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testOptimizeNonNullLiterals()</pre>
</li>
</ul>
<a id="testSimpleIdentifier()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSimpleIdentifier</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSimpleIdentifier()</pre>
</li>
</ul>
<a id="testMixed1()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testMixed1</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testMixed1()</pre>
</li>
</ul>
<a id="testMixed2()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testMixed2</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testMixed2()</pre>
</li>
</ul>
<a id="testMixed3()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testMixed3</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testMixed3()</pre>
</li>
</ul>
<a id="testExactLiteral()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testExactLiteral</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testExactLiteral()</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-814">[CALCITE-814]
 RexBuilder reverses precision and scale of DECIMAL literal</a>
 and
 <a href="https://issues.apache.org/jira/browse/CALCITE-1344">[CALCITE-1344]
 Incorrect inferred precision when BigDecimal value is less than 1</a>.</div>
</li>
</ul>
<a id="testSplitJoinCondition()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSplitJoinCondition</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSplitJoinCondition()</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-833">[CALCITE-833]
 RelOptUtil.splitJoinCondition attempts to split a Join-Condition which
 has a remaining condition</a>.</div>
</li>
</ul>
<a id="testLogic()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testLogic</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testLogic()</pre>
<div class="block">Test case for <code>LogicVisitor</code>.</div>
</li>
</ul>
<a id="deduceLogic(org.apache.calcite.rex.RexNode,org.apache.calcite.rex.RexNode,org.apache.calcite.plan.RelOptUtil.Logic)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>deduceLogic</h4>
<pre class="methodSignature">private&nbsp;org.apache.calcite.plan.RelOptUtil.Logic&nbsp;deduceLogic&#8203;(org.apache.calcite.rex.RexNode&nbsp;root,
                                                             org.apache.calcite.rex.RexNode&nbsp;seek,
                                                             org.apache.calcite.plan.RelOptUtil.Logic&nbsp;logic)</pre>
</li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
</div>
</main>
<!-- ========= END OF CLASS DATA ========= -->
<footer role="contentinfo">
<nav role="navigation">
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a id="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../index.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/RexTransformerTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-all.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../../allclasses.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</nav>
<p class="legalCopy"><small>Copyright &#169; 2012&#x2013;2018 <a href="https://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</small></p>
</footer>
</body>
</html>
