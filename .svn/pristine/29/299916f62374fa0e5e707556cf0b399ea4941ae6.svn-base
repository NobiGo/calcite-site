<!DOCTYPE HTML>
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc -->
<title>SqlPrettyWriter (Apache Calcite API)</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" type="text/css" href="../../../../../stylesheet.css" title="Style">
<link rel="stylesheet" type="text/css" href="../../../../../jquery/jquery-ui.css" title="Style">
<script type="text/javascript" src="../../../../../script.js"></script>
<script type="text/javascript" src="../../../../../jquery/jszip/dist/jszip.min.js"></script>
<script type="text/javascript" src="../../../../../jquery/jszip-utils/dist/jszip-utils.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="../../../../../jquery/jszip-utils/dist/jszip-utils-ie.min.js"></script>
<![endif]-->
<script type="text/javascript" src="../../../../../jquery/jquery-3.3.1.js"></script>
<script type="text/javascript" src="../../../../../jquery/jquery-migrate-3.0.1.js"></script>
<script type="text/javascript" src="../../../../../jquery/jquery-ui.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="SqlPrettyWriter (Apache Calcite API)";
        }
    }
    catch(err) {
    }
//-->
var data = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":9,"i25":9,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
var pathtoroot = "../../../../../";
var useModuleDirectories = true;
loadScripts(document, 'script');</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<header role="banner">
<nav role="navigation">
<div class="fixedNav">
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a id="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../../index.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/SqlPrettyWriter.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-all.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../../../allclasses.html">All&nbsp;Classes</a></li>
</ul>
<ul class="navListSearch">
<li><label for="search">SEARCH:</label>
<input type="text" id="search" value="search" disabled="disabled">
<input type="reset" id="reset" value="reset" disabled="disabled">
</li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
</div>
<div class="navPadding">&nbsp;</div>
<script type="text/javascript"><!--
$('.navPadding').css('padding-top', $('.fixedNav').css("height"));
//-->
</script>
</nav>
</header>
<!-- ======== START OF CLASS DATA ======== -->
<main role="main">
<div class="header">
<div class="subTitle"><span class="packageLabelInType">Package</span>&nbsp;<a href="package-summary.html">org.apache.calcite.sql.pretty</a></div>
<h2 title="Class SqlPrettyWriter" class="title">Class SqlPrettyWriter</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>org.apache.calcite.sql.pretty.SqlPrettyWriter</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd><code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
<hr>
<pre>public class <span class="typeNameLabel">SqlPrettyWriter</span>
extends java.lang.Object
implements <a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></pre>
<div class="block">Pretty printer for SQL statements.

 <p>There are several options to control the format.

 <table>
 <caption>Formatting options</caption>
 <tr>
 <th>Option</th>
 <th>Description</th>
 <th>Default</th>
 </tr>
 <tr>
 <td><a href="#setSelectListItemsOnSeparateLines(boolean)"><code>SelectListItemsOnSeparateLines</code></a>
 </td>
 <td>Whether each item in the select clause is on its own line</td>
 <td>false</td>
 </tr>
 <tr>
 <td><a href="#setCaseClausesOnNewLines(boolean)"><code>CaseClausesOnNewLines</code></a></td>
 <td>Whether the WHEN, THEN and ELSE clauses of a CASE expression appear at
 the start of a new line.</td>
 <td>false</td>
 </tr>
 <tr>
 <td><a href="#setIndentation(int)"><code>Indentation</code></a></td>
 <td>Number of spaces to indent</td>
 <td>4</td>
 </tr>
 <tr>
 <td><a href="#setKeywordsLowerCase(boolean)"><code>KeywordsLowerCase</code></a></td>
 <td>Whether to print keywords (SELECT, AS, etc.) in lower-case.</td>
 <td>false</td>
 </tr>
 <tr>
 <td><a href="#isAlwaysUseParentheses()"><code>ParenthesizeAllExprs</code></a></td>
 <td>Whether to enclose all expressions in parentheses, even if the operator
 has high enough precedence that the parentheses are not required.

 <p>For example, the parentheses are required in the expression <code>(a + b)
 c</code> because the '*' operator has higher precedence than the '+'
 operator, and so without the parentheses, the expression would be equivalent
 to <code>a + (b * c)</code>. The fully-parenthesized expression, <code>((a +
 b) * c)</code> is unambiguous even if you don't know the precedence of every
 operator.</td>
 <td></td>
 </tr>
 <tr>
 <td><a href="#setQuoteAllIdentifiers(boolean)"><code>QuoteAllIdentifiers</code></a></td>
 <td>Whether to quote all identifiers, even those which would be correct
 according to the rules of the <a href="../SqlDialect.html" title="class in org.apache.calcite.sql"><code>SqlDialect</code></a> if quotation marks were
 omitted.</td>
 <td>true</td>
 </tr>
 <tr>
 <td><a href="#setSelectListItemsOnSeparateLines(boolean)"><code>SelectListItemsOnSeparateLines</code></a>
 </td>
 <td>Whether each item in the select clause is on its own line.</td>
 <td>false</td>
 </tr>
 <tr>
 <td><a href="#setSubQueryStyle(org.apache.calcite.sql.SqlWriter.SubQueryStyle)"><code>SubQueryStyle</code></a></td>
 <td>Style for formatting sub-queries. Values are:
 <a href="../SqlWriter.SubQueryStyle.html#HYDE"><code>Hyde</code></a>,
 <a href="../SqlWriter.SubQueryStyle.html#BLACK"><code>Black</code></a>.</td>

 <td><a href="../SqlWriter.SubQueryStyle.html#HYDE"><code>Hyde</code></a></td>
 </tr>
 <tr>
 <td><a href="#setLineLength(int)"><code>LineLength</code></a></td>
 <td>Set the desired maximum length for lines (to look nice in editors,
 printouts, etc.).</td>
 <td>0</td>
 </tr>
 </table></div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<table class="memberSummary">
<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Class</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static class&nbsp;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="SqlPrettyWriter.Bean.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.Bean</a></span></code></th>
<td class="colLast">
<div class="block">Helper class which exposes the get/set methods of an object as
 properties.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected class&nbsp;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="SqlPrettyWriter.FrameImpl.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.FrameImpl</a></span></code></th>
<td class="colLast">
<div class="block">Implementation of <a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql"><code>SqlWriter.Frame</code></a>.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a id="nested.classes.inherited.from.class.org.apache.calcite.sql.SqlWriter">
<!--   -->
</a>
<h3>Nested classes/interfaces inherited from interface&nbsp;org.apache.calcite.sql.<a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></h3>
<code><a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a>, <a href="../SqlWriter.FrameType.html" title="interface in org.apache.calcite.sql">SqlWriter.FrameType</a>, <a href="../SqlWriter.FrameTypeEnum.html" title="enum in org.apache.calcite.sql">SqlWriter.FrameTypeEnum</a>, <a href="../SqlWriter.SubQueryStyle.html" title="enum in org.apache.calcite.sql">SqlWriter.SubQueryStyle</a></code></li>
</ul>
</li>
</ul>
</section>
<!-- =========== FIELD SUMMARY =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Field</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#alwaysUseParentheses">alwaysUseParentheses</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private <a href="SqlPrettyWriter.Bean.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.Bean</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#bean">bean</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#caseClausesOnNewLines">caseClausesOnNewLines</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#charCount">charCount</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#clauseStartsLine">clauseStartsLine</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#currentIndent">currentIndent</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static <a href="SqlPrettyWriter.Bean.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.Bean</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#DEFAULT_BEAN">DEFAULT_BEAN</a></span></code></th>
<td class="colLast">
<div class="block">Bean holding the default property values.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private <a href="../SqlDialect.html" title="class in org.apache.calcite.sql">SqlDialect</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#dialect">dialect</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private com.google.common.collect.ImmutableList.Builder&lt;java.lang.Integer&gt;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#dynamicParameters">dynamicParameters</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected <a href="SqlPrettyWriter.FrameImpl.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.FrameImpl</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#frame">frame</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#indentation">indentation</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#keywordsLowerCase">keywordsLowerCase</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#lineLength">lineLength</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private java.util.Deque&lt;<a href="SqlPrettyWriter.FrameImpl.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.FrameImpl</a>&gt;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#listStack">listStack</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected static <a href="../../util/trace/CalciteLogger.html" title="class in org.apache.calcite.util.trace">CalciteLogger</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#LOGGER">LOGGER</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#needWhitespace">needWhitespace</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected java.lang.String</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#nextWhitespace">nextWhitespace</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>protected static java.lang.String</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#NL">NL</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>protected java.io.PrintWriter</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#pw">pw</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#quoteAllIdentifiers">quoteAllIdentifiers</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#selectListExtraIndentFlag">selectListExtraIndentFlag</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#selectListItemsOnSeparateLines">selectListItemsOnSeparateLines</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="../SqlWriter.SubQueryStyle.html" title="enum in org.apache.calcite.sql">SqlWriter.SubQueryStyle</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#subQueryStyle">subQueryStyle</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private java.io.StringWriter</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#sw">sw</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#updateSetListNewline">updateSetListNewline</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#whereListItemsOnSeparateLines">whereListItemsOnSeparateLines</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#windowDeclListNewline">windowDeclListNewline</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#windowNewline">windowNewline</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Constructor</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<th class="colConstructorName" scope="row"><code><span class="memberNameLink"><a href="#%3Cinit%3E(org.apache.calcite.sql.SqlDialect)">SqlPrettyWriter</a></span>&#8203;(<a href="../SqlDialect.html" title="class in org.apache.calcite.sql">SqlDialect</a>&nbsp;dialect)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<th class="colConstructorName" scope="row"><code><span class="memberNameLink"><a href="#%3Cinit%3E(org.apache.calcite.sql.SqlDialect,boolean)">SqlPrettyWriter</a></span>&#8203;(<a href="../SqlDialect.html" title="class in org.apache.calcite.sql">SqlDialect</a>&nbsp;dialect,
               boolean&nbsp;alwaysUseParentheses)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="altColor">
<th class="colConstructorName" scope="row"><code><span class="memberNameLink"><a href="#%3Cinit%3E(org.apache.calcite.sql.SqlDialect,boolean,java.io.PrintWriter)">SqlPrettyWriter</a></span>&#8203;(<a href="../SqlDialect.html" title="class in org.apache.calcite.sql">SqlDialect</a>&nbsp;dialect,
               boolean&nbsp;alwaysUseParentheses,
               java.io.PrintWriter&nbsp;pw)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- ========== METHOD SUMMARY =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Method</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>protected <a href="SqlPrettyWriter.FrameImpl.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.FrameImpl</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#createListFrame(org.apache.calcite.sql.SqlWriter.FrameType,java.lang.String,java.lang.String,java.lang.String)">createListFrame</a></span>&#8203;(<a href="../SqlWriter.FrameType.html" title="interface in org.apache.calcite.sql">SqlWriter.FrameType</a>&nbsp;frameType,
               java.lang.String&nbsp;keyword,
               java.lang.String&nbsp;open,
               java.lang.String&nbsp;close)</code></th>
<td class="colLast">
<div class="block">Creates a list frame.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#describe(java.io.PrintWriter,boolean)">describe</a></span>&#8203;(java.io.PrintWriter&nbsp;pw,
        boolean&nbsp;omitDefaults)</code></th>
<td class="colLast">
<div class="block">Prints the property settings of this pretty-writer to a writer.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#dynamicParam(int)">dynamicParam</a></span>&#8203;(int&nbsp;index)</code></th>
<td class="colLast">
<div class="block">Prints a dynamic parameter (e.g.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#endFunCall(org.apache.calcite.sql.SqlWriter.Frame)">endFunCall</a></span>&#8203;(<a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a>&nbsp;frame)</code></th>
<td class="colLast">
<div class="block">Ends a list which is a call to a function.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#endList(org.apache.calcite.sql.SqlWriter.Frame)">endList</a></span>&#8203;(<a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a>&nbsp;frame)</code></th>
<td class="colLast">
<div class="block">Ends a list.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#fetchOffset(org.apache.calcite.sql.SqlNode,org.apache.calcite.sql.SqlNode)">fetchOffset</a></span>&#8203;(<a href="../SqlNode.html" title="class in org.apache.calcite.sql">SqlNode</a>&nbsp;fetch,
           <a href="../SqlNode.html" title="class in org.apache.calcite.sql">SqlNode</a>&nbsp;offset)</code></th>
<td class="colLast">
<div class="block">Prints the OFFSET/FETCH clause.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#format(org.apache.calcite.sql.SqlNode)">format</a></span>&#8203;(<a href="../SqlNode.html" title="class in org.apache.calcite.sql">SqlNode</a>&nbsp;node)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>private <a href="SqlPrettyWriter.Bean.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.Bean</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getBean()">getBean</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns an object which encapsulates each property as a get/set method.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code><a href="../SqlDialect.html" title="class in org.apache.calcite.sql">SqlDialect</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getDialect()">getDialect</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the dialect of SQL.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getIndentation()">getIndentation</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the offset for each level of indentation.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#getLineLength()">getLineLength</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#identifier(java.lang.String)">identifier</a></span>&#8203;(java.lang.String&nbsp;name)</code></th>
<td class="colLast">
<div class="block">Prints an identifier, quoting as necessary.</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>(package private) void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#indent(int)">indent</a></span>&#8203;(int&nbsp;indent)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#inQuery()">inQuery</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns whether we are currently in a query context (SELECT, INSERT,
 UNION, INTERSECT, EXCEPT, and the ORDER BY operator).</div>
</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isAlwaysUseParentheses()">isAlwaysUseParentheses</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns whether to enclose all expressions in parentheses, even if the
 operator has high enough precedence that the parentheses are not
 required.</div>
</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isClauseStartsLine()">isClauseStartsLine</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns whether this writer should start each clause (e.g.</div>
</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isKeywordsLowerCase()">isKeywordsLowerCase</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns whether to output all keywords (e.g.</div>
</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isQuoteAllIdentifiers()">isQuoteAllIdentifiers</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns whether this writer should quote all identifiers, even those
 that do not contain mixed-case identifiers or punctuation.</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isSelectListExtraIndentFlag()">isSelectListExtraIndentFlag</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isSelectListItemsOnSeparateLines()">isSelectListItemsOnSeparateLines</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns whether the items in the SELECT clause should each be on a
 separate line.</div>
</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isWhereListItemsOnSeparateLines()">isWhereListItemsOnSeparateLines</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#keyword(java.lang.String)">keyword</a></span>&#8203;(java.lang.String&nbsp;s)</code></th>
<td class="colLast">
<div class="block">Prints a sequence of keywords.</div>
</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#literal(java.lang.String)">literal</a></span>&#8203;(java.lang.String&nbsp;s)</code></th>
<td class="colLast">
<div class="block">Prints a literal, exactly as provided.</div>
</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code>private void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#maybeWhitespace(java.lang.String)">maybeWhitespace</a></span>&#8203;(java.lang.String&nbsp;s)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code>private static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#needWhitespaceAfter(java.lang.String)">needWhitespaceAfter</a></span>&#8203;(java.lang.String&nbsp;s)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code>private static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#needWhitespaceBefore(java.lang.String)">needWhitespaceBefore</a></span>&#8203;(java.lang.String&nbsp;s)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i26" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#newlineAndIndent()">newlineAndIndent</a></span>()</code></th>
<td class="colLast">
<div class="block">Prints a new line, and indents.</div>
</td>
</tr>
<tr id="i27" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#print(int)">print</a></span>&#8203;(int&nbsp;x)</code></th>
<td class="colLast">
<div class="block">Prints an integer.</div>
</td>
</tr>
<tr id="i28" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#print(java.lang.String)">print</a></span>&#8203;(java.lang.String&nbsp;s)</code></th>
<td class="colLast">
<div class="block">Prints a string, preceded by whitespace if necessary.</div>
</td>
</tr>
<tr id="i29" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#reset()">reset</a></span>()</code></th>
<td class="colLast">
<div class="block">Resets this writer so that it can format another expression.</div>
</td>
</tr>
<tr id="i30" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#resetSettings()">resetSettings</a></span>()</code></th>
<td class="colLast">
<div class="block">Resets all properties to their default values.</div>
</td>
</tr>
<tr id="i31" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#sep(java.lang.String)">sep</a></span>&#8203;(java.lang.String&nbsp;sep)</code></th>
<td class="colLast">
<div class="block">Writes a list separator, unless the separator is "," and this is the
 first occurrence in the list.</div>
</td>
</tr>
<tr id="i32" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#sep(java.lang.String,boolean)">sep</a></span>&#8203;(java.lang.String&nbsp;sep,
   boolean&nbsp;printFirst)</code></th>
<td class="colLast">
<div class="block">Writes a list separator.</div>
</td>
</tr>
<tr id="i33" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setAlwaysUseParentheses(boolean)">setAlwaysUseParentheses</a></span>&#8203;(boolean&nbsp;b)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i34" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setCaseClausesOnNewLines(boolean)">setCaseClausesOnNewLines</a></span>&#8203;(boolean&nbsp;caseClausesOnNewLines)</code></th>
<td class="colLast">
<div class="block">Sets whether the WHEN, THEN and ELSE clauses of a CASE expression appear
 at the start of a new line.</div>
</td>
</tr>
<tr id="i35" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setClauseStartsLine(boolean)">setClauseStartsLine</a></span>&#8203;(boolean&nbsp;clauseStartsLine)</code></th>
<td class="colLast">
<div class="block">Sets whether a clause (FROM, WHERE, GROUP BY, HAVING, WINDOW, ORDER BY)
 starts a new line.</div>
</td>
</tr>
<tr id="i36" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setFormatOptions(org.apache.calcite.sql.pretty.SqlFormatOptions)">setFormatOptions</a></span>&#8203;(<a href="SqlFormatOptions.html" title="class in org.apache.calcite.sql.pretty">SqlFormatOptions</a>&nbsp;options)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i37" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setIndentation(int)">setIndentation</a></span>&#8203;(int&nbsp;indentation)</code></th>
<td class="colLast">
<div class="block">Sets the number of spaces indentation.</div>
</td>
</tr>
<tr id="i38" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setKeywordsLowerCase(boolean)">setKeywordsLowerCase</a></span>&#8203;(boolean&nbsp;b)</code></th>
<td class="colLast">
<div class="block">Sets whether to print keywords (SELECT, AS, etc.) in lower-case.</div>
</td>
</tr>
<tr id="i39" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setLineLength(int)">setLineLength</a></span>&#8203;(int&nbsp;lineLength)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i40" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setNeedWhitespace(boolean)">setNeedWhitespace</a></span>&#8203;(boolean&nbsp;needWhitespace)</code></th>
<td class="colLast">
<div class="block">Sets whether whitespace is needed before the next token.</div>
</td>
</tr>
<tr id="i41" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setQuoteAllIdentifiers(boolean)">setQuoteAllIdentifiers</a></span>&#8203;(boolean&nbsp;b)</code></th>
<td class="colLast">
<div class="block">Sets whether to quote all identifiers, even those which would be correct
 according to the rules of the <a href="../SqlDialect.html" title="class in org.apache.calcite.sql"><code>SqlDialect</code></a> if quotation marks were
 omitted.</div>
</td>
</tr>
<tr id="i42" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setSelectListExtraIndentFlag(boolean)">setSelectListExtraIndentFlag</a></span>&#8203;(boolean&nbsp;b)</code></th>
<td class="colLast">
<div class="block">Sets whether to use a fix for SELECT list indentations.</div>
</td>
</tr>
<tr id="i43" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setSelectListItemsOnSeparateLines(boolean)">setSelectListItemsOnSeparateLines</a></span>&#8203;(boolean&nbsp;b)</code></th>
<td class="colLast">
<div class="block">Sets whether each item in a SELECT list, GROUP BY list, or ORDER BY list
 is on its own line.</div>
</td>
</tr>
<tr id="i44" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setSettings(java.util.Properties)">setSettings</a></span>&#8203;(java.util.Properties&nbsp;properties)</code></th>
<td class="colLast">
<div class="block">Sets settings from a properties object.</div>
</td>
</tr>
<tr id="i45" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setSubQueryStyle(org.apache.calcite.sql.SqlWriter.SubQueryStyle)">setSubQueryStyle</a></span>&#8203;(<a href="../SqlWriter.SubQueryStyle.html" title="enum in org.apache.calcite.sql">SqlWriter.SubQueryStyle</a>&nbsp;subQueryStyle)</code></th>
<td class="colLast">
<div class="block">Sets the sub-query style.</div>
</td>
</tr>
<tr id="i46" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setWhereListItemsOnSeparateLines(boolean)">setWhereListItemsOnSeparateLines</a></span>&#8203;(boolean&nbsp;b)</code></th>
<td class="colLast">
<div class="block">Sets whether to print a newline before each AND or OR (whichever is
 higher level) in WHERE clauses.</div>
</td>
</tr>
<tr id="i47" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setWindowDeclListNewline(boolean)">setWindowDeclListNewline</a></span>&#8203;(boolean&nbsp;windowDeclListNewline)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i48" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#setWindowNewline(boolean)">setWindowNewline</a></span>&#8203;(boolean&nbsp;windowNewline)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i49" class="rowColor">
<td class="colFirst"><code><a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#startFunCall(java.lang.String)">startFunCall</a></span>&#8203;(java.lang.String&nbsp;funName)</code></th>
<td class="colLast">
<div class="block">Starts a list which is a call to a function.</div>
</td>
</tr>
<tr id="i50" class="altColor">
<td class="colFirst"><code><a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#startList(java.lang.String,java.lang.String)">startList</a></span>&#8203;(java.lang.String&nbsp;open,
         java.lang.String&nbsp;close)</code></th>
<td class="colLast">
<div class="block">Starts a list.</div>
</td>
</tr>
<tr id="i51" class="rowColor">
<td class="colFirst"><code><a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#startList(org.apache.calcite.sql.SqlWriter.FrameTypeEnum)">startList</a></span>&#8203;(<a href="../SqlWriter.FrameTypeEnum.html" title="enum in org.apache.calcite.sql">SqlWriter.FrameTypeEnum</a>&nbsp;frameType)</code></th>
<td class="colLast">
<div class="block">Starts a list with no opening string.</div>
</td>
</tr>
<tr id="i52" class="altColor">
<td class="colFirst"><code><a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#startList(org.apache.calcite.sql.SqlWriter.FrameType,java.lang.String,java.lang.String)">startList</a></span>&#8203;(<a href="../SqlWriter.FrameType.html" title="interface in org.apache.calcite.sql">SqlWriter.FrameType</a>&nbsp;frameType,
         java.lang.String&nbsp;open,
         java.lang.String&nbsp;close)</code></th>
<td class="colLast">
<div class="block">Starts a list.</div>
</td>
</tr>
<tr id="i53" class="rowColor">
<td class="colFirst"><code>protected <a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#startList(org.apache.calcite.sql.SqlWriter.FrameType,java.lang.String,java.lang.String,java.lang.String)">startList</a></span>&#8203;(<a href="../SqlWriter.FrameType.html" title="interface in org.apache.calcite.sql">SqlWriter.FrameType</a>&nbsp;frameType,
         java.lang.String&nbsp;keyword,
         java.lang.String&nbsp;open,
         java.lang.String&nbsp;close)</code></th>
<td class="colLast">
<div class="block">Starts a list.</div>
</td>
</tr>
<tr id="i54" class="altColor">
<td class="colFirst"><code>protected boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#tooLong(java.lang.String)">tooLong</a></span>&#8203;(java.lang.String&nbsp;s)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i55" class="rowColor">
<td class="colFirst"><code><a href="../util/SqlString.html" title="class in org.apache.calcite.sql.util">SqlString</a></code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#toSqlString()">toSqlString</a></span>()</code></th>
<td class="colLast">
<div class="block">Returns the contents of this writer as a 'certified kocher' SQL string.</div>
</td>
</tr>
<tr id="i56" class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#toString()">toString</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i57" class="rowColor">
<td class="colFirst"><code>protected void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#whiteSpace()">whiteSpace</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a id="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a id="LOGGER">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>LOGGER</h4>
<pre>protected static final&nbsp;<a href="../../util/trace/CalciteLogger.html" title="class in org.apache.calcite.util.trace">CalciteLogger</a> LOGGER</pre>
</li>
</ul>
<a id="DEFAULT_BEAN">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>DEFAULT_BEAN</h4>
<pre>private static final&nbsp;<a href="SqlPrettyWriter.Bean.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.Bean</a> DEFAULT_BEAN</pre>
<div class="block">Bean holding the default property values.</div>
</li>
</ul>
<a id="NL">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>NL</h4>
<pre>protected static final&nbsp;java.lang.String NL</pre>
</li>
</ul>
<a id="dialect">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dialect</h4>
<pre>private final&nbsp;<a href="../SqlDialect.html" title="class in org.apache.calcite.sql">SqlDialect</a> dialect</pre>
</li>
</ul>
<a id="sw">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sw</h4>
<pre>private final&nbsp;java.io.StringWriter sw</pre>
</li>
</ul>
<a id="pw">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pw</h4>
<pre>protected final&nbsp;java.io.PrintWriter pw</pre>
</li>
</ul>
<a id="listStack">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>listStack</h4>
<pre>private final&nbsp;java.util.Deque&lt;<a href="SqlPrettyWriter.FrameImpl.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.FrameImpl</a>&gt; listStack</pre>
</li>
</ul>
<a id="dynamicParameters">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dynamicParameters</h4>
<pre>private&nbsp;com.google.common.collect.ImmutableList.Builder&lt;java.lang.Integer&gt; dynamicParameters</pre>
</li>
</ul>
<a id="frame">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>frame</h4>
<pre>protected&nbsp;<a href="SqlPrettyWriter.FrameImpl.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.FrameImpl</a> frame</pre>
</li>
</ul>
<a id="needWhitespace">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>needWhitespace</h4>
<pre>private&nbsp;boolean needWhitespace</pre>
</li>
</ul>
<a id="nextWhitespace">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>nextWhitespace</h4>
<pre>protected&nbsp;java.lang.String nextWhitespace</pre>
</li>
</ul>
<a id="alwaysUseParentheses">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>alwaysUseParentheses</h4>
<pre>protected&nbsp;boolean alwaysUseParentheses</pre>
</li>
</ul>
<a id="keywordsLowerCase">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>keywordsLowerCase</h4>
<pre>private&nbsp;boolean keywordsLowerCase</pre>
</li>
</ul>
<a id="bean">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>bean</h4>
<pre>private&nbsp;<a href="SqlPrettyWriter.Bean.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.Bean</a> bean</pre>
</li>
</ul>
<a id="quoteAllIdentifiers">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>quoteAllIdentifiers</h4>
<pre>private&nbsp;boolean quoteAllIdentifiers</pre>
</li>
</ul>
<a id="indentation">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>indentation</h4>
<pre>private&nbsp;int indentation</pre>
</li>
</ul>
<a id="clauseStartsLine">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clauseStartsLine</h4>
<pre>private&nbsp;boolean clauseStartsLine</pre>
</li>
</ul>
<a id="selectListItemsOnSeparateLines">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>selectListItemsOnSeparateLines</h4>
<pre>private&nbsp;boolean selectListItemsOnSeparateLines</pre>
</li>
</ul>
<a id="selectListExtraIndentFlag">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>selectListExtraIndentFlag</h4>
<pre>private&nbsp;boolean selectListExtraIndentFlag</pre>
</li>
</ul>
<a id="currentIndent">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>currentIndent</h4>
<pre>private&nbsp;int currentIndent</pre>
</li>
</ul>
<a id="windowDeclListNewline">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>windowDeclListNewline</h4>
<pre>private&nbsp;boolean windowDeclListNewline</pre>
</li>
</ul>
<a id="updateSetListNewline">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>updateSetListNewline</h4>
<pre>private&nbsp;boolean updateSetListNewline</pre>
</li>
</ul>
<a id="windowNewline">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>windowNewline</h4>
<pre>private&nbsp;boolean windowNewline</pre>
</li>
</ul>
<a id="subQueryStyle">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>subQueryStyle</h4>
<pre>private&nbsp;<a href="../SqlWriter.SubQueryStyle.html" title="enum in org.apache.calcite.sql">SqlWriter.SubQueryStyle</a> subQueryStyle</pre>
</li>
</ul>
<a id="whereListItemsOnSeparateLines">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>whereListItemsOnSeparateLines</h4>
<pre>private&nbsp;boolean whereListItemsOnSeparateLines</pre>
</li>
</ul>
<a id="caseClausesOnNewLines">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>caseClausesOnNewLines</h4>
<pre>private&nbsp;boolean caseClausesOnNewLines</pre>
</li>
</ul>
<a id="lineLength">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>lineLength</h4>
<pre>private&nbsp;int lineLength</pre>
</li>
</ul>
<a id="charCount">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>charCount</h4>
<pre>private&nbsp;int charCount</pre>
</li>
</ul>
</li>
</ul>
</section>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a id="&lt;init&gt;(org.apache.calcite.sql.SqlDialect,boolean,java.io.PrintWriter)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SqlPrettyWriter</h4>
<pre>public&nbsp;SqlPrettyWriter&#8203;(<a href="../SqlDialect.html" title="class in org.apache.calcite.sql">SqlDialect</a>&nbsp;dialect,
                       boolean&nbsp;alwaysUseParentheses,
                       java.io.PrintWriter&nbsp;pw)</pre>
</li>
</ul>
<a id="&lt;init&gt;(org.apache.calcite.sql.SqlDialect,boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SqlPrettyWriter</h4>
<pre>public&nbsp;SqlPrettyWriter&#8203;(<a href="../SqlDialect.html" title="class in org.apache.calcite.sql">SqlDialect</a>&nbsp;dialect,
                       boolean&nbsp;alwaysUseParentheses)</pre>
</li>
</ul>
<a id="&lt;init&gt;(org.apache.calcite.sql.SqlDialect)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>SqlPrettyWriter</h4>
<pre>public&nbsp;SqlPrettyWriter&#8203;(<a href="../SqlDialect.html" title="class in org.apache.calcite.sql">SqlDialect</a>&nbsp;dialect)</pre>
</li>
</ul>
</li>
</ul>
</section>
<!-- ============ METHOD DETAIL ========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a id="setCaseClausesOnNewLines(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setCaseClausesOnNewLines</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setCaseClausesOnNewLines&#8203;(boolean&nbsp;caseClausesOnNewLines)</pre>
<div class="block">Sets whether the WHEN, THEN and ELSE clauses of a CASE expression appear
 at the start of a new line. The default is false.</div>
</li>
</ul>
<a id="setSubQueryStyle(org.apache.calcite.sql.SqlWriter.SubQueryStyle)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setSubQueryStyle</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setSubQueryStyle&#8203;(<a href="../SqlWriter.SubQueryStyle.html" title="enum in org.apache.calcite.sql">SqlWriter.SubQueryStyle</a>&nbsp;subQueryStyle)</pre>
<div class="block">Sets the sub-query style. Default is
 <a href="../SqlWriter.SubQueryStyle.html#HYDE"><code>SqlWriter.SubQueryStyle.HYDE</code></a>.</div>
</li>
</ul>
<a id="setWindowNewline(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setWindowNewline</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setWindowNewline&#8203;(boolean&nbsp;windowNewline)</pre>
</li>
</ul>
<a id="setWindowDeclListNewline(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setWindowDeclListNewline</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setWindowDeclListNewline&#8203;(boolean&nbsp;windowDeclListNewline)</pre>
</li>
</ul>
<a id="getIndentation()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getIndentation</h4>
<pre class="methodSignature">public&nbsp;int&nbsp;getIndentation()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#getIndentation()">SqlWriter</a></code></span></div>
<div class="block">Returns the offset for each level of indentation. Default 4.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#getIndentation()">getIndentation</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="isAlwaysUseParentheses()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isAlwaysUseParentheses</h4>
<pre class="methodSignature">public&nbsp;boolean&nbsp;isAlwaysUseParentheses()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#isAlwaysUseParentheses()">SqlWriter</a></code></span></div>
<div class="block">Returns whether to enclose all expressions in parentheses, even if the
 operator has high enough precedence that the parentheses are not
 required.

 <p>For example, the parentheses are required in the expression <code>(a +
 b) * c</code> because the '*' operator has higher precedence than the '+'
 operator, and so without the parentheses, the expression would be
 equivalent to <code>a + (b * c)</code>. The fully-parenthesized
 expression, <code>((a + b) * c)</code> is unambiguous even if you don't
 know the precedence of every operator.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#isAlwaysUseParentheses()">isAlwaysUseParentheses</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="inQuery()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>inQuery</h4>
<pre class="methodSignature">public&nbsp;boolean&nbsp;inQuery()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#inQuery()">SqlWriter</a></code></span></div>
<div class="block">Returns whether we are currently in a query context (SELECT, INSERT,
 UNION, INTERSECT, EXCEPT, and the ORDER BY operator).</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#inQuery()">inQuery</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="isQuoteAllIdentifiers()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isQuoteAllIdentifiers</h4>
<pre class="methodSignature">public&nbsp;boolean&nbsp;isQuoteAllIdentifiers()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#isQuoteAllIdentifiers()">SqlWriter</a></code></span></div>
<div class="block">Returns whether this writer should quote all identifiers, even those
 that do not contain mixed-case identifiers or punctuation.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#isQuoteAllIdentifiers()">isQuoteAllIdentifiers</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>whether to quote all identifiers</dd>
</dl>
</li>
</ul>
<a id="isClauseStartsLine()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isClauseStartsLine</h4>
<pre class="methodSignature">public&nbsp;boolean&nbsp;isClauseStartsLine()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#isClauseStartsLine()">SqlWriter</a></code></span></div>
<div class="block">Returns whether this writer should start each clause (e.g. GROUP BY) on
 a new line.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#isClauseStartsLine()">isClauseStartsLine</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>whether to start each clause on a new line</dd>
</dl>
</li>
</ul>
<a id="isSelectListItemsOnSeparateLines()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isSelectListItemsOnSeparateLines</h4>
<pre class="methodSignature">public&nbsp;boolean&nbsp;isSelectListItemsOnSeparateLines()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#isSelectListItemsOnSeparateLines()">SqlWriter</a></code></span></div>
<div class="block">Returns whether the items in the SELECT clause should each be on a
 separate line.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#isSelectListItemsOnSeparateLines()">isSelectListItemsOnSeparateLines</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>whether to put each SELECT clause item on a new line</dd>
</dl>
</li>
</ul>
<a id="isWhereListItemsOnSeparateLines()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isWhereListItemsOnSeparateLines</h4>
<pre class="methodSignature">public&nbsp;boolean&nbsp;isWhereListItemsOnSeparateLines()</pre>
</li>
</ul>
<a id="isSelectListExtraIndentFlag()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isSelectListExtraIndentFlag</h4>
<pre class="methodSignature">public&nbsp;boolean&nbsp;isSelectListExtraIndentFlag()</pre>
</li>
</ul>
<a id="isKeywordsLowerCase()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isKeywordsLowerCase</h4>
<pre class="methodSignature">public&nbsp;boolean&nbsp;isKeywordsLowerCase()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#isKeywordsLowerCase()">SqlWriter</a></code></span></div>
<div class="block">Returns whether to output all keywords (e.g. SELECT, GROUP BY) in lower
 case.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#isKeywordsLowerCase()">isKeywordsLowerCase</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>whether to output SQL keywords in lower case</dd>
</dl>
</li>
</ul>
<a id="getLineLength()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getLineLength</h4>
<pre class="methodSignature">public&nbsp;int&nbsp;getLineLength()</pre>
</li>
</ul>
<a id="resetSettings()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>resetSettings</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;resetSettings()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#resetSettings()">SqlWriter</a></code></span></div>
<div class="block">Resets all properties to their default values.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#resetSettings()">resetSettings</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="reset()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>reset</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;reset()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#reset()">SqlWriter</a></code></span></div>
<div class="block">Resets this writer so that it can format another expression. Does not
 affect formatting preferences (see <a href="../SqlWriter.html#resetSettings()"><code>SqlWriter.resetSettings()</code></a></div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#reset()">reset</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="getBean()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getBean</h4>
<pre class="methodSignature">private&nbsp;<a href="SqlPrettyWriter.Bean.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.Bean</a>&nbsp;getBean()</pre>
<div class="block">Returns an object which encapsulates each property as a get/set method.</div>
</li>
</ul>
<a id="setIndentation(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setIndentation</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setIndentation&#8203;(int&nbsp;indentation)</pre>
<div class="block">Sets the number of spaces indentation.</div>
<dl>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#getIndentation()"><code>getIndentation()</code></a></dd>
</dl>
</li>
</ul>
<a id="describe(java.io.PrintWriter,boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>describe</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;describe&#8203;(java.io.PrintWriter&nbsp;pw,
                     boolean&nbsp;omitDefaults)</pre>
<div class="block">Prints the property settings of this pretty-writer to a writer.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>pw</code> - Writer</dd>
<dd><code>omitDefaults</code> - Whether to omit properties whose value is the same as
                     the default</dd>
</dl>
</li>
</ul>
<a id="setSettings(java.util.Properties)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setSettings</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setSettings&#8203;(java.util.Properties&nbsp;properties)</pre>
<div class="block">Sets settings from a properties object.</div>
</li>
</ul>
<a id="setClauseStartsLine(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setClauseStartsLine</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setClauseStartsLine&#8203;(boolean&nbsp;clauseStartsLine)</pre>
<div class="block">Sets whether a clause (FROM, WHERE, GROUP BY, HAVING, WINDOW, ORDER BY)
 starts a new line. Default is true. SELECT is always at the start of a
 line.</div>
</li>
</ul>
<a id="setSelectListItemsOnSeparateLines(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setSelectListItemsOnSeparateLines</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setSelectListItemsOnSeparateLines&#8203;(boolean&nbsp;b)</pre>
<div class="block">Sets whether each item in a SELECT list, GROUP BY list, or ORDER BY list
 is on its own line. Default false.</div>
</li>
</ul>
<a id="setSelectListExtraIndentFlag(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setSelectListExtraIndentFlag</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setSelectListExtraIndentFlag&#8203;(boolean&nbsp;b)</pre>
<div class="block">Sets whether to use a fix for SELECT list indentations.

 <ul>
 <li>If set to "false":

 <blockquote><pre>
 SELECT
     A as A
         B as B
         C as C
     D
 </pre></blockquote>

 <li>If set to "true":

 <blockquote><pre>
 SELECT
     A as A
     B as B
     C as C
     D
 </pre></blockquote>
 </ul></div>
</li>
</ul>
<a id="setKeywordsLowerCase(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setKeywordsLowerCase</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setKeywordsLowerCase&#8203;(boolean&nbsp;b)</pre>
<div class="block">Sets whether to print keywords (SELECT, AS, etc.) in lower-case. The
 default is false: keywords are printed in upper-case.</div>
</li>
</ul>
<a id="setWhereListItemsOnSeparateLines(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setWhereListItemsOnSeparateLines</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setWhereListItemsOnSeparateLines&#8203;(boolean&nbsp;b)</pre>
<div class="block">Sets whether to print a newline before each AND or OR (whichever is
 higher level) in WHERE clauses. NOTE: <i>Ignored when
 alwaysUseParentheses is set to true.</i></div>
</li>
</ul>
<a id="setAlwaysUseParentheses(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setAlwaysUseParentheses</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setAlwaysUseParentheses&#8203;(boolean&nbsp;b)</pre>
</li>
</ul>
<a id="newlineAndIndent()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>newlineAndIndent</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;newlineAndIndent()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#newlineAndIndent()">SqlWriter</a></code></span></div>
<div class="block">Prints a new line, and indents.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#newlineAndIndent()">newlineAndIndent</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="indent(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>indent</h4>
<pre class="methodSignature">void&nbsp;indent&#8203;(int&nbsp;indent)</pre>
</li>
</ul>
<a id="setQuoteAllIdentifiers(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setQuoteAllIdentifiers</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setQuoteAllIdentifiers&#8203;(boolean&nbsp;b)</pre>
<div class="block">Sets whether to quote all identifiers, even those which would be correct
 according to the rules of the <a href="../SqlDialect.html" title="class in org.apache.calcite.sql"><code>SqlDialect</code></a> if quotation marks were
 omitted.

 <p>Default true.</div>
</li>
</ul>
<a id="createListFrame(org.apache.calcite.sql.SqlWriter.FrameType,java.lang.String,java.lang.String,java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createListFrame</h4>
<pre class="methodSignature">protected&nbsp;<a href="SqlPrettyWriter.FrameImpl.html" title="class in org.apache.calcite.sql.pretty">SqlPrettyWriter.FrameImpl</a>&nbsp;createListFrame&#8203;(<a href="../SqlWriter.FrameType.html" title="interface in org.apache.calcite.sql">SqlWriter.FrameType</a>&nbsp;frameType,
                                                    java.lang.String&nbsp;keyword,
                                                    java.lang.String&nbsp;open,
                                                    java.lang.String&nbsp;close)</pre>
<div class="block">Creates a list frame.

 <p>Derived classes should override this method to specify the indentation
 of the list.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>frameType</code> - What type of list</dd>
<dd><code>keyword</code> - The keyword to be printed at the start of the list</dd>
<dd><code>open</code> - The string to print at the start of the list</dd>
<dd><code>close</code> - The string to print at the end of the list</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A frame</dd>
</dl>
</li>
</ul>
<a id="startList(org.apache.calcite.sql.SqlWriter.FrameType,java.lang.String,java.lang.String,java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>startList</h4>
<pre class="methodSignature">protected&nbsp;<a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a>&nbsp;startList&#8203;(<a href="../SqlWriter.FrameType.html" title="interface in org.apache.calcite.sql">SqlWriter.FrameType</a>&nbsp;frameType,
                                    java.lang.String&nbsp;keyword,
                                    java.lang.String&nbsp;open,
                                    java.lang.String&nbsp;close)</pre>
<div class="block">Starts a list.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>frameType</code> - Type of list. For example, a SELECT list will be
                  governed according to SELECT-list formatting preferences.</dd>
<dd><code>open</code> - String to print at the start of the list; typically "(" or
                  the empty string.</dd>
<dd><code>close</code> - String to print at the end of the list.</dd>
</dl>
</li>
</ul>
<a id="endList(org.apache.calcite.sql.SqlWriter.Frame)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>endList</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;endList&#8203;(<a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a>&nbsp;frame)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#endList(org.apache.calcite.sql.SqlWriter.Frame)">SqlWriter</a></code></span></div>
<div class="block">Ends a list.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#endList(org.apache.calcite.sql.SqlWriter.Frame)">endList</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>frame</code> - The frame which was created by <a href="../SqlWriter.html#startList(java.lang.String,java.lang.String)"><code>SqlWriter.startList(java.lang.String, java.lang.String)</code></a>.</dd>
</dl>
</li>
</ul>
<a id="format(org.apache.calcite.sql.SqlNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>format</h4>
<pre class="methodSignature">public&nbsp;java.lang.String&nbsp;format&#8203;(<a href="../SqlNode.html" title="class in org.apache.calcite.sql">SqlNode</a>&nbsp;node)</pre>
</li>
</ul>
<a id="toString()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toString</h4>
<pre class="methodSignature">public&nbsp;java.lang.String&nbsp;toString()</pre>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
</dl>
</li>
</ul>
<a id="toSqlString()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toSqlString</h4>
<pre class="methodSignature">public&nbsp;<a href="../util/SqlString.html" title="class in org.apache.calcite.sql.util">SqlString</a>&nbsp;toSqlString()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#toSqlString()">SqlWriter</a></code></span></div>
<div class="block">Returns the contents of this writer as a 'certified kocher' SQL string.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#toSqlString()">toSqlString</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>SQL string</dd>
</dl>
</li>
</ul>
<a id="getDialect()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDialect</h4>
<pre class="methodSignature">public&nbsp;<a href="../SqlDialect.html" title="class in org.apache.calcite.sql">SqlDialect</a>&nbsp;getDialect()</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#getDialect()">SqlWriter</a></code></span></div>
<div class="block">Returns the dialect of SQL.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#getDialect()">getDialect</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>SQL dialect</dd>
</dl>
</li>
</ul>
<a id="literal(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>literal</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;literal&#8203;(java.lang.String&nbsp;s)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#literal(java.lang.String)">SqlWriter</a></code></span></div>
<div class="block">Prints a literal, exactly as provided. Does not attempt to indent or
 convert to upper or lower case. Does not add quotation marks. Adds
 preceding whitespace if necessary.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#literal(java.lang.String)">literal</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="keyword(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>keyword</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;keyword&#8203;(java.lang.String&nbsp;s)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#keyword(java.lang.String)">SqlWriter</a></code></span></div>
<div class="block">Prints a sequence of keywords. Must not start or end with space, but may
 contain a space. For example, <code>keyword("SELECT")</code>, <code>
 keyword("CHARACTER SET")</code>.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#keyword(java.lang.String)">keyword</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="maybeWhitespace(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>maybeWhitespace</h4>
<pre class="methodSignature">private&nbsp;void&nbsp;maybeWhitespace&#8203;(java.lang.String&nbsp;s)</pre>
</li>
</ul>
<a id="needWhitespaceBefore(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>needWhitespaceBefore</h4>
<pre class="methodSignature">private static&nbsp;boolean&nbsp;needWhitespaceBefore&#8203;(java.lang.String&nbsp;s)</pre>
</li>
</ul>
<a id="needWhitespaceAfter(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>needWhitespaceAfter</h4>
<pre class="methodSignature">private static&nbsp;boolean&nbsp;needWhitespaceAfter&#8203;(java.lang.String&nbsp;s)</pre>
</li>
</ul>
<a id="whiteSpace()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>whiteSpace</h4>
<pre class="methodSignature">protected&nbsp;void&nbsp;whiteSpace()</pre>
</li>
</ul>
<a id="tooLong(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tooLong</h4>
<pre class="methodSignature">protected&nbsp;boolean&nbsp;tooLong&#8203;(java.lang.String&nbsp;s)</pre>
</li>
</ul>
<a id="print(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>print</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;print&#8203;(java.lang.String&nbsp;s)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#print(java.lang.String)">SqlWriter</a></code></span></div>
<div class="block">Prints a string, preceded by whitespace if necessary.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#print(java.lang.String)">print</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="print(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>print</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;print&#8203;(int&nbsp;x)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#print(int)">SqlWriter</a></code></span></div>
<div class="block">Prints an integer.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#print(int)">print</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>x</code> - Integer</dd>
</dl>
</li>
</ul>
<a id="identifier(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>identifier</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;identifier&#8203;(java.lang.String&nbsp;name)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#identifier(java.lang.String)">SqlWriter</a></code></span></div>
<div class="block">Prints an identifier, quoting as necessary.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#identifier(java.lang.String)">identifier</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="dynamicParam(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dynamicParam</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;dynamicParam&#8203;(int&nbsp;index)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#dynamicParam(int)">SqlWriter</a></code></span></div>
<div class="block">Prints a dynamic parameter (e.g. <code>?</code> for default JDBC)</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#dynamicParam(int)">dynamicParam</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="fetchOffset(org.apache.calcite.sql.SqlNode,org.apache.calcite.sql.SqlNode)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>fetchOffset</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;fetchOffset&#8203;(<a href="../SqlNode.html" title="class in org.apache.calcite.sql">SqlNode</a>&nbsp;fetch,
                        <a href="../SqlNode.html" title="class in org.apache.calcite.sql">SqlNode</a>&nbsp;offset)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#fetchOffset(org.apache.calcite.sql.SqlNode,org.apache.calcite.sql.SqlNode)">SqlWriter</a></code></span></div>
<div class="block">Prints the OFFSET/FETCH clause.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#fetchOffset(org.apache.calcite.sql.SqlNode,org.apache.calcite.sql.SqlNode)">fetchOffset</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="startFunCall(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>startFunCall</h4>
<pre class="methodSignature">public&nbsp;<a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a>&nbsp;startFunCall&#8203;(java.lang.String&nbsp;funName)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#startFunCall(java.lang.String)">SqlWriter</a></code></span></div>
<div class="block">Starts a list which is a call to a function.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#startFunCall(java.lang.String)">startFunCall</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="../SqlWriter.html#endFunCall(org.apache.calcite.sql.SqlWriter.Frame)"><code>SqlWriter.endFunCall(Frame)</code></a></dd>
</dl>
</li>
</ul>
<a id="endFunCall(org.apache.calcite.sql.SqlWriter.Frame)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>endFunCall</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;endFunCall&#8203;(<a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a>&nbsp;frame)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#endFunCall(org.apache.calcite.sql.SqlWriter.Frame)">SqlWriter</a></code></span></div>
<div class="block">Ends a list which is a call to a function.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#endFunCall(org.apache.calcite.sql.SqlWriter.Frame)">endFunCall</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>frame</code> - Frame</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="../SqlWriter.html#startFunCall(java.lang.String)"><code>SqlWriter.startFunCall(String)</code></a></dd>
</dl>
</li>
</ul>
<a id="startList(java.lang.String,java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>startList</h4>
<pre class="methodSignature">public&nbsp;<a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a>&nbsp;startList&#8203;(java.lang.String&nbsp;open,
                                 java.lang.String&nbsp;close)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#startList(java.lang.String,java.lang.String)">SqlWriter</a></code></span></div>
<div class="block">Starts a list.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#startList(java.lang.String,java.lang.String)">startList</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="startList(org.apache.calcite.sql.SqlWriter.FrameTypeEnum)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>startList</h4>
<pre class="methodSignature">public&nbsp;<a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a>&nbsp;startList&#8203;(<a href="../SqlWriter.FrameTypeEnum.html" title="enum in org.apache.calcite.sql">SqlWriter.FrameTypeEnum</a>&nbsp;frameType)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#startList(org.apache.calcite.sql.SqlWriter.FrameTypeEnum)">SqlWriter</a></code></span></div>
<div class="block">Starts a list with no opening string.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#startList(org.apache.calcite.sql.SqlWriter.FrameTypeEnum)">startList</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>frameType</code> - Type of list. For example, a SELECT list will be</dd>
</dl>
</li>
</ul>
<a id="startList(org.apache.calcite.sql.SqlWriter.FrameType,java.lang.String,java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>startList</h4>
<pre class="methodSignature">public&nbsp;<a href="../SqlWriter.Frame.html" title="interface in org.apache.calcite.sql">SqlWriter.Frame</a>&nbsp;startList&#8203;(<a href="../SqlWriter.FrameType.html" title="interface in org.apache.calcite.sql">SqlWriter.FrameType</a>&nbsp;frameType,
                                 java.lang.String&nbsp;open,
                                 java.lang.String&nbsp;close)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#startList(org.apache.calcite.sql.SqlWriter.FrameType,java.lang.String,java.lang.String)">SqlWriter</a></code></span></div>
<div class="block">Starts a list.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#startList(org.apache.calcite.sql.SqlWriter.FrameType,java.lang.String,java.lang.String)">startList</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>frameType</code> - Type of list. For example, a SELECT list will be
                  governed according to SELECT-list formatting preferences.</dd>
<dd><code>open</code> - String to start the list; typically "(" or the empty
                  string.</dd>
<dd><code>close</code> - String to close the list</dd>
</dl>
</li>
</ul>
<a id="sep(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sep</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;sep&#8203;(java.lang.String&nbsp;sep)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#sep(java.lang.String)">SqlWriter</a></code></span></div>
<div class="block">Writes a list separator, unless the separator is "," and this is the
 first occurrence in the list.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#sep(java.lang.String)">sep</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>sep</code> - List separator, typically ",".</dd>
</dl>
</li>
</ul>
<a id="sep(java.lang.String,boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>sep</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;sep&#8203;(java.lang.String&nbsp;sep,
                boolean&nbsp;printFirst)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#sep(java.lang.String,boolean)">SqlWriter</a></code></span></div>
<div class="block">Writes a list separator.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#sep(java.lang.String,boolean)">sep</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>sep</code> - List separator, typically ","</dd>
<dd><code>printFirst</code> - Whether to print the first occurrence of the separator</dd>
</dl>
</li>
</ul>
<a id="setNeedWhitespace(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setNeedWhitespace</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setNeedWhitespace&#8203;(boolean&nbsp;needWhitespace)</pre>
<div class="block"><span class="descfrmTypeLabel">Description copied from interface:&nbsp;<code><a href="../SqlWriter.html#setNeedWhitespace(boolean)">SqlWriter</a></code></span></div>
<div class="block">Sets whether whitespace is needed before the next token.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="../SqlWriter.html#setNeedWhitespace(boolean)">setNeedWhitespace</a></code>&nbsp;in interface&nbsp;<code><a href="../SqlWriter.html" title="interface in org.apache.calcite.sql">SqlWriter</a></code></dd>
</dl>
</li>
</ul>
<a id="setLineLength(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setLineLength</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setLineLength&#8203;(int&nbsp;lineLength)</pre>
</li>
</ul>
<a id="setFormatOptions(org.apache.calcite.sql.pretty.SqlFormatOptions)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>setFormatOptions</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;setFormatOptions&#8203;(<a href="SqlFormatOptions.html" title="class in org.apache.calcite.sql.pretty">SqlFormatOptions</a>&nbsp;options)</pre>
</li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
</div>
</main>
<!-- ========= END OF CLASS DATA ========= -->
<footer role="contentinfo">
<nav role="navigation">
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a id="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../../index.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/SqlPrettyWriter.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-all.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../../../allclasses.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</nav>
<p class="legalCopy"><small>Copyright &#169; 2012&#x2013;2018 <a href="https://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</small></p>
</footer>
</body>
</html>
