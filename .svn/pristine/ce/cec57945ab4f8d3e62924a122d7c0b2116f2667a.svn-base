<!DOCTYPE HTML>
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc -->
<title>ReflectiveSchemaTest (Calcite 1.18.0 Test API)</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="stylesheet" type="text/css" href="../../../../stylesheet.css" title="Style">
<link rel="stylesheet" type="text/css" href="../../../../jquery/jquery-ui.css" title="Style">
<script type="text/javascript" src="../../../../script.js"></script>
<script type="text/javascript" src="../../../../jquery/jszip/dist/jszip.min.js"></script>
<script type="text/javascript" src="../../../../jquery/jszip-utils/dist/jszip-utils.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="../../../../jquery/jszip-utils/dist/jszip-utils-ie.min.js"></script>
<![endif]-->
<script type="text/javascript" src="../../../../jquery/jquery-3.3.1.js"></script>
<script type="text/javascript" src="../../../../jquery/jquery-migrate-3.0.1.js"></script>
<script type="text/javascript" src="../../../../jquery/jquery-ui.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="ReflectiveSchemaTest (Calcite 1.18.0 Test API)";
        }
    }
    catch(err) {
    }
//-->
var data = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":9,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
var pathtoroot = "../../../../";
var useModuleDirectories = true;
loadScripts(document, 'script');</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<header role="banner">
<nav role="navigation">
<div class="fixedNav">
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a id="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../index.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/ReflectiveSchemaTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-all.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../../allclasses.html">All&nbsp;Classes</a></li>
</ul>
<ul class="navListSearch">
<li><label for="search">SEARCH:</label>
<input type="text" id="search" value="search" disabled="disabled">
<input type="reset" id="reset" value="reset" disabled="disabled">
</li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
</div>
<div class="navPadding">&nbsp;</div>
<script type="text/javascript"><!--
$('.navPadding').css('padding-top', $('.fixedNav').css("height"));
//-->
</script>
</nav>
</header>
<!-- ======== START OF CLASS DATA ======== -->
<main role="main">
<div class="header">
<div class="subTitle"><span class="packageLabelInType">Package</span>&nbsp;<a href="package-summary.html">org.apache.calcite.test</a></div>
<h2 title="Class ReflectiveSchemaTest" class="title">Class ReflectiveSchemaTest</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>org.apache.calcite.test.ReflectiveSchemaTest</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<pre>public class <span class="typeNameLabel">ReflectiveSchemaTest</span>
extends java.lang.Object</pre>
<div class="block">Unit tests for <code>ReflectiveSchema</code>.</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== NESTED CLASS SUMMARY ======== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="nested.class.summary">
<!--   -->
</a>
<h3>Nested Class Summary</h3>
<table class="memberSummary">
<caption><span>Nested Classes</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Class</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static class&nbsp;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="ReflectiveSchemaTest.AllPrivate.html" title="class in org.apache.calcite.test">ReflectiveSchemaTest.AllPrivate</a></span></code></th>
<td class="colLast">
<div class="block">All field are private, therefore the resulting record has no fields.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static class&nbsp;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="ReflectiveSchemaTest.BadType.html" title="class in org.apache.calcite.test">ReflectiveSchemaTest.BadType</a></span></code></th>
<td class="colLast">
<div class="block">Table that has a field that cannot be recognized as a SQL type.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static class&nbsp;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="ReflectiveSchemaTest.CatchallSchema.html" title="class in org.apache.calcite.test">ReflectiveSchemaTest.CatchallSchema</a></span></code></th>
<td class="colLast">
<div class="block">Object whose fields are relations.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static class&nbsp;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="ReflectiveSchemaTest.DateColumnSchema.html" title="class in org.apache.calcite.test">ReflectiveSchemaTest.DateColumnSchema</a></span></code></th>
<td class="colLast">
<div class="block">Schema that contains a table with a date column.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static class&nbsp;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="ReflectiveSchemaTest.EmployeeWithHireDate.html" title="class in org.apache.calcite.test">ReflectiveSchemaTest.EmployeeWithHireDate</a></span></code></th>
<td class="colLast">
<div class="block">Extension to <a href="JdbcTest.Employee.html" title="class in org.apache.calcite.test"><code>JdbcTest.Employee</code></a> with a <code>hireDate</code> column.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static class&nbsp;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="ReflectiveSchemaTest.EveryType.html" title="class in org.apache.calcite.test">ReflectiveSchemaTest.EveryType</a></span></code></th>
<td class="colLast">
<div class="block">Record that has a field of every interesting type.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static class&nbsp;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="ReflectiveSchemaTest.IntAndString.html" title="class in org.apache.calcite.test">ReflectiveSchemaTest.IntAndString</a></span></code></th>
<td class="colLast">
<div class="block">Table that has integer and string fields</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static class&nbsp;</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="ReflectiveSchemaTest.IntHolder.html" title="class in org.apache.calcite.test">ReflectiveSchemaTest.IntHolder</a></span></code></th>
<td class="colLast">
<div class="block">Custom java class that holds just a single field.</div>
</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- =========== FIELD SUMMARY =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Field</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private static org.apache.calcite.adapter.java.ReflectiveSchema</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#CATCHALL">CATCHALL</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.reflect.Method</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#LINQ4J_AS_ENUMERABLE_METHOD">LINQ4J_AS_ENUMERABLE_METHOD</a></span></code></th>
<td class="colLast">&nbsp;</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Constructor</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr class="altColor">
<th class="colConstructorName" scope="row"><code><span class="memberNameLink"><a href="#%3Cinit%3E()">ReflectiveSchemaTest</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
</table>
</li>
</ul>
</section>
<!-- ========== METHOD SUMMARY =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colSecond" scope="col">Method</th>
<th class="colLast" scope="col">Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>private void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#check(java.sql.ResultSetMetaData,java.lang.String,java.lang.Class)">check</a></span>&#8203;(java.sql.ResultSetMetaData&nbsp;metaData,
     java.lang.String&nbsp;columnName,
     java.lang.Class&nbsp;expectedType)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>private void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#checkAgg(org.apache.calcite.test.CalciteAssert.AssertThat,java.lang.String)">checkAgg</a></span>&#8203;(<a href="CalciteAssert.AssertThat.html" title="class in org.apache.calcite.test">CalciteAssert.AssertThat</a>&nbsp;with,
        java.lang.String&nbsp;fn)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>private void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#checkOp(org.apache.calcite.test.CalciteAssert.AssertThat,java.lang.String)">checkOp</a></span>&#8203;(<a href="CalciteAssert.AssertThat.html" title="class in org.apache.calcite.test">CalciteAssert.AssertThat</a>&nbsp;with,
       java.lang.String&nbsp;fn)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>private int</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#count(java.sql.ResultSet)">count</a></span>&#8203;(java.sql.ResultSet&nbsp;resultSet)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>private java.lang.Object</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#get(java.sql.ResultSet)">get</a></span>&#8203;(java.sql.ResultSet&nbsp;input)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>private static boolean</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#isNumeric(java.lang.Class)">isNumeric</a></span>&#8203;(java.lang.Class&nbsp;type)</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testAggregateFunctions()">testAggregateFunctions</a></span>()</code></th>
<td class="colLast">
<div class="block">Tests columns based on types such as java.sql.Date and java.util.Date.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testArrayOfBoxedPrimitives()">testArrayOfBoxedPrimitives</a></span>()</code></th>
<td class="colLast">
<div class="block">Table with single field as Integer[]</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testArrayOfPrimitives()">testArrayOfPrimitives</a></span>()</code></th>
<td class="colLast">
<div class="block">Table with single field as int[]</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testAvgInt()">testAvgInt</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-580">[CALCITE-580]
 Average aggregation on an Integer column throws ClassCastException</a>.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testCastFromString()">testCastFromString</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testClassNames()">testClassNames</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testColumnTypes()">testColumnTypes</a></span>()</code></th>
<td class="colLast">
<div class="block">Tests columns based on types such as java.sql.Date and java.util.Date.</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testCompareJavaAndSqlTypes()">testCompareJavaAndSqlTypes</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-119">[CALCITE-119]
 Comparing a Java type long with a SQL type INTEGER gives wrong
 answer</a>.</div>
</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testCustomBoxedSalarCalc()">testCustomBoxedSalarCalc</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testCustomBoxedScalar()">testCustomBoxedScalar</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testDateCanCompare()">testDateCanCompare</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-1569">[CALCITE-1569]
 Date condition can generates Integer == Integer, which is always
 false</a>.</div>
</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testDateColumn()">testDateColumn</a></span>()</code></th>
<td class="colLast">
<div class="block">Tests column based on java.sql.Date field.</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testDivideWraperPrimitive()">testDivideWraperPrimitive</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testDivideWraperWrapper()">testDivideWraperWrapper</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testDivideWraperWrapperMultipleTimes()">testDivideWraperWrapperMultipleTimes</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testJavaBoolean()">testJavaBoolean</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testNoPublicFields()">testNoPublicFields</a></span>()</code></th>
<td class="colLast">
<div class="block">Tests querying an object that has no public fields.</div>
</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testOp()">testOp</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testOperator()">testOperator</a></span>()</code></th>
<td class="colLast">
<div class="block">Tests a relation that is accessed via method syntax.</div>
</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testPrefix()">testPrefix</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for a bug where a Java string 'Abc' compared to a char 'Ab'
 would be truncated to the char precision and falsely match.</div>
</td>
</tr>
<tr id="i26" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testQueryProvider()">testQueryProvider</a></span>()</code></th>
<td class="colLast">
<div class="block">Test that uses a JDBC connection as a linq4j
 <code>QueryProvider</code>.</div>
</td>
</tr>
<tr id="i27" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testQueryProviderSingleColumn()">testQueryProviderSingleColumn</a></span>()</code></th>
<td class="colLast">&nbsp;</td>
</tr>
<tr id="i28" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testReflectiveSchemaInUnnamedPackage()">testReflectiveSchemaInUnnamedPackage</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-281">[CALCITE-1919]
 NPE when target in ReflectiveSchema belongs to the unnamed package</a>.</div>
</td>
</tr>
<tr id="i29" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSchemaFieldHasBadType()">testSchemaFieldHasBadType</a></span>()</code></th>
<td class="colLast">
<div class="block">Tests that a schema with a field whose type cannot be recognized
 throws an informative exception.</div>
</td>
</tr>
<tr id="i30" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSelectNOT()">testSelectNOT</a></span>()</code></th>
<td class="colLast">
<div class="block">Tests NOT for nullable columns</div>
</td>
</tr>
<tr id="i31" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSelectWithFieldAccessOnFirstLevelRecordType()">testSelectWithFieldAccessOnFirstLevelRecordType</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</td>
</tr>
<tr id="i32" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSelectWithFieldAccessOnFirstLevelRecordTypeArray()">testSelectWithFieldAccessOnFirstLevelRecordTypeArray</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</td>
</tr>
<tr id="i33" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSelectWithFieldAccessOnSecondLevelRecordType()">testSelectWithFieldAccessOnSecondLevelRecordType</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</td>
</tr>
<tr id="i34" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testSelectWithFieldAccessOnSecondLevelRecordTypeArray()">testSelectWithFieldAccessOnSecondLevelRecordTypeArray</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</td>
</tr>
<tr id="i35" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testTableFieldHasBadType()">testTableFieldHasBadType</a></span>()</code></th>
<td class="colLast">
<div class="block">Tests that if a field of a relation has an unrecognized type (in this
 case a <code>BitSet</code>) then it is treated as an object.</div>
</td>
</tr>
<tr id="i36" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testTableMacro()">testTableMacro</a></span>()</code></th>
<td class="colLast">
<div class="block">Finds a table-macro using reflection.</div>
</td>
</tr>
<tr id="i37" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testTableMacroIsView()">testTableMacroIsView</a></span>()</code></th>
<td class="colLast">
<div class="block">If a method returns a
 <code>ViewTable</code>.<code>ViewTableMacro</code>, then it
 should be expanded.</div>
</td>
</tr>
<tr id="i38" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testUnknownInOr()">testUnknownInOr</a></span>()</code></th>
<td class="colLast">
<div class="block">CALCITE-2611 unknown on one side of an or may lead to uncompilable code</div>
</td>
</tr>
<tr id="i39" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testView()">testView</a></span>()</code></th>
<td class="colLast">
<div class="block">Tests a view.</div>
</td>
</tr>
<tr id="i40" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testViewPath()">testViewPath</a></span>()</code></th>
<td class="colLast">
<div class="block">Tests a view with a path.</div>
</td>
</tr>
<tr id="i41" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testWhereNOT()">testWhereNOT</a></span>()</code></th>
<td class="colLast">
<div class="block">Tests NOT for nullable columns</div>
</td>
</tr>
<tr id="i42" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testWhereWithFieldAccessOnFirstLevelRecordType()">testWhereWithFieldAccessOnFirstLevelRecordType</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</td>
</tr>
<tr id="i43" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testWhereWithFieldAccessOnFirstLevelRecordTypeArray()">testWhereWithFieldAccessOnFirstLevelRecordTypeArray</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</td>
</tr>
<tr id="i44" class="altColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testWhereWithFieldAccessOnSecondLevelRecordType()">testWhereWithFieldAccessOnSecondLevelRecordType</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</td>
</tr>
<tr id="i45" class="rowColor">
<td class="colFirst"><code>void</code></td>
<th class="colSecond" scope="row"><code><span class="memberNameLink"><a href="#testWhereWithFieldAccessOnSecondLevelRecordTypeArray()">testWhereWithFieldAccessOnSecondLevelRecordTypeArray</a></span>()</code></th>
<td class="colLast">
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a id="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a id="LINQ4J_AS_ENUMERABLE_METHOD">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>LINQ4J_AS_ENUMERABLE_METHOD</h4>
<pre>public static final&nbsp;java.lang.reflect.Method LINQ4J_AS_ENUMERABLE_METHOD</pre>
</li>
</ul>
<a id="CATCHALL">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>CATCHALL</h4>
<pre>private static final&nbsp;org.apache.calcite.adapter.java.ReflectiveSchema CATCHALL</pre>
</li>
</ul>
</li>
</ul>
</section>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a id="&lt;init&gt;()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>ReflectiveSchemaTest</h4>
<pre>public&nbsp;ReflectiveSchemaTest()</pre>
</li>
</ul>
</li>
</ul>
</section>
<!-- ============ METHOD DETAIL ========== -->
<section role="region">
<ul class="blockList">
<li class="blockList"><a id="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a id="testQueryProvider()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testQueryProvider</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testQueryProvider()
                       throws java.lang.Exception</pre>
<div class="block">Test that uses a JDBC connection as a linq4j
 <code>QueryProvider</code>.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code> - on error</dd>
</dl>
</li>
</ul>
<a id="testQueryProviderSingleColumn()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testQueryProviderSingleColumn</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testQueryProviderSingleColumn()
                                   throws java.lang.Exception</pre>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testOperator()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testOperator</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testOperator()
                  throws java.sql.SQLException,
                         java.lang.ClassNotFoundException</pre>
<div class="block">Tests a relation that is accessed via method syntax.
 The function returns a <code>Queryable</code>.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.sql.SQLException</code></dd>
<dd><code>java.lang.ClassNotFoundException</code></dd>
</dl>
</li>
</ul>
<a id="testView()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testView</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testView()
              throws java.sql.SQLException,
                     java.lang.ClassNotFoundException</pre>
<div class="block">Tests a view.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.sql.SQLException</code></dd>
<dd><code>java.lang.ClassNotFoundException</code></dd>
</dl>
</li>
</ul>
<a id="testViewPath()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testViewPath</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testViewPath()
                  throws java.sql.SQLException,
                         java.lang.ClassNotFoundException</pre>
<div class="block">Tests a view with a path.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.sql.SQLException</code></dd>
<dd><code>java.lang.ClassNotFoundException</code></dd>
</dl>
</li>
</ul>
<a id="count(java.sql.ResultSet)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>count</h4>
<pre class="methodSignature">private&nbsp;int&nbsp;count&#8203;(java.sql.ResultSet&nbsp;resultSet)
           throws java.sql.SQLException</pre>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.sql.SQLException</code></dd>
</dl>
</li>
</ul>
<a id="testDateColumn()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testDateColumn</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testDateColumn()
                    throws java.lang.Exception</pre>
<div class="block">Tests column based on java.sql.Date field.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testNoPublicFields()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testNoPublicFields</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testNoPublicFields()
                        throws java.lang.Exception</pre>
<div class="block">Tests querying an object that has no public fields.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testColumnTypes()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testColumnTypes</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testColumnTypes()
                     throws java.lang.Exception</pre>
<div class="block">Tests columns based on types such as java.sql.Date and java.util.Date.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="ReflectiveSchemaTest.CatchallSchema.html#everyTypes"><code>ReflectiveSchemaTest.CatchallSchema.everyTypes</code></a></dd>
</dl>
</li>
</ul>
<a id="testWhereNOT()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testWhereNOT</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testWhereNOT()
                  throws java.lang.Exception</pre>
<div class="block">Tests NOT for nullable columns</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="ReflectiveSchemaTest.CatchallSchema.html#everyTypes"><code>ReflectiveSchemaTest.CatchallSchema.everyTypes</code></a></dd>
</dl>
</li>
</ul>
<a id="testSelectNOT()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSelectNOT</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSelectNOT()
                   throws java.lang.Exception</pre>
<div class="block">Tests NOT for nullable columns</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="ReflectiveSchemaTest.CatchallSchema.html#everyTypes"><code>ReflectiveSchemaTest.CatchallSchema.everyTypes</code></a></dd>
</dl>
</li>
</ul>
<a id="testSelectWithFieldAccessOnFirstLevelRecordType()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSelectWithFieldAccessOnFirstLevelRecordType</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSelectWithFieldAccessOnFirstLevelRecordType()</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</li>
</ul>
<a id="testSelectWithFieldAccessOnSecondLevelRecordType()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSelectWithFieldAccessOnSecondLevelRecordType</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSelectWithFieldAccessOnSecondLevelRecordType()</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</li>
</ul>
<a id="testWhereWithFieldAccessOnFirstLevelRecordType()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testWhereWithFieldAccessOnFirstLevelRecordType</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testWhereWithFieldAccessOnFirstLevelRecordType()</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</li>
</ul>
<a id="testWhereWithFieldAccessOnSecondLevelRecordType()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testWhereWithFieldAccessOnSecondLevelRecordType</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testWhereWithFieldAccessOnSecondLevelRecordType()</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</li>
</ul>
<a id="testSelectWithFieldAccessOnFirstLevelRecordTypeArray()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSelectWithFieldAccessOnFirstLevelRecordTypeArray</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSelectWithFieldAccessOnFirstLevelRecordTypeArray()</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</li>
</ul>
<a id="testSelectWithFieldAccessOnSecondLevelRecordTypeArray()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSelectWithFieldAccessOnSecondLevelRecordTypeArray</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSelectWithFieldAccessOnSecondLevelRecordTypeArray()</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</li>
</ul>
<a id="testWhereWithFieldAccessOnFirstLevelRecordTypeArray()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testWhereWithFieldAccessOnFirstLevelRecordTypeArray</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testWhereWithFieldAccessOnFirstLevelRecordTypeArray()</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</li>
</ul>
<a id="testWhereWithFieldAccessOnSecondLevelRecordTypeArray()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testWhereWithFieldAccessOnSecondLevelRecordTypeArray</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testWhereWithFieldAccessOnSecondLevelRecordTypeArray()</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-2404">[CALCITE-2404]
 Accessing structured-types is not implemented by the runtime</a>.</div>
</li>
</ul>
<a id="testAggregateFunctions()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testAggregateFunctions</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testAggregateFunctions()
                            throws java.lang.Exception</pre>
<div class="block">Tests columns based on types such as java.sql.Date and java.util.Date.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="ReflectiveSchemaTest.CatchallSchema.html#everyTypes"><code>ReflectiveSchemaTest.CatchallSchema.everyTypes</code></a></dd>
</dl>
</li>
</ul>
<a id="checkAgg(org.apache.calcite.test.CalciteAssert.AssertThat,java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>checkAgg</h4>
<pre class="methodSignature">private&nbsp;void&nbsp;checkAgg&#8203;(<a href="CalciteAssert.AssertThat.html" title="class in org.apache.calcite.test">CalciteAssert.AssertThat</a>&nbsp;with,
                      java.lang.String&nbsp;fn)</pre>
</li>
</ul>
<a id="get(java.sql.ResultSet)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>get</h4>
<pre class="methodSignature">private&nbsp;java.lang.Object&nbsp;get&#8203;(java.sql.ResultSet&nbsp;input)
                      throws java.sql.SQLException</pre>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.sql.SQLException</code></dd>
</dl>
</li>
</ul>
<a id="testClassNames()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testClassNames</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testClassNames()
                    throws java.lang.Exception</pre>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="check(java.sql.ResultSetMetaData,java.lang.String,java.lang.Class)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>check</h4>
<pre class="methodSignature">private&nbsp;void&nbsp;check&#8203;(java.sql.ResultSetMetaData&nbsp;metaData,
                   java.lang.String&nbsp;columnName,
                   java.lang.Class&nbsp;expectedType)
            throws java.sql.SQLException</pre>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.sql.SQLException</code></dd>
</dl>
</li>
</ul>
<a id="testJavaBoolean()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testJavaBoolean</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testJavaBoolean()
                     throws java.lang.Exception</pre>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testCompareJavaAndSqlTypes()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testCompareJavaAndSqlTypes</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testCompareJavaAndSqlTypes()
                                throws java.lang.Exception</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-119">[CALCITE-119]
 Comparing a Java type long with a SQL type INTEGER gives wrong
 answer</a>.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testDivideWraperPrimitive()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testDivideWraperPrimitive</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testDivideWraperPrimitive()
                               throws java.lang.Exception</pre>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testDivideWraperWrapper()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testDivideWraperWrapper</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testDivideWraperWrapper()
                             throws java.lang.Exception</pre>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testDivideWraperWrapperMultipleTimes()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testDivideWraperWrapperMultipleTimes</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testDivideWraperWrapperMultipleTimes()
                                          throws java.lang.Exception</pre>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testOp()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testOp</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testOp()
            throws java.lang.Exception</pre>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="checkOp(org.apache.calcite.test.CalciteAssert.AssertThat,java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>checkOp</h4>
<pre class="methodSignature">private&nbsp;void&nbsp;checkOp&#8203;(<a href="CalciteAssert.AssertThat.html" title="class in org.apache.calcite.test">CalciteAssert.AssertThat</a>&nbsp;with,
                     java.lang.String&nbsp;fn)</pre>
</li>
</ul>
<a id="testCastFromString()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testCastFromString</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testCastFromString()</pre>
</li>
</ul>
<a id="testAvgInt()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testAvgInt</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testAvgInt()
                throws java.lang.Exception</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-580">[CALCITE-580]
 Average aggregation on an Integer column throws ClassCastException</a>.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="isNumeric(java.lang.Class)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isNumeric</h4>
<pre class="methodSignature">private static&nbsp;boolean&nbsp;isNumeric&#8203;(java.lang.Class&nbsp;type)</pre>
</li>
</ul>
<a id="testTableFieldHasBadType()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testTableFieldHasBadType</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testTableFieldHasBadType()
                              throws java.lang.Exception</pre>
<div class="block">Tests that if a field of a relation has an unrecognized type (in this
 case a <code>BitSet</code>) then it is treated as an object.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="ReflectiveSchemaTest.CatchallSchema.html#badTypes"><code>ReflectiveSchemaTest.CatchallSchema.badTypes</code></a></dd>
</dl>
</li>
</ul>
<a id="testSchemaFieldHasBadType()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSchemaFieldHasBadType</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testSchemaFieldHasBadType()
                               throws java.lang.Exception</pre>
<div class="block">Tests that a schema with a field whose type cannot be recognized
 throws an informative exception.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="ReflectiveSchemaTest.CatchallSchema.html#enumerable"><code>ReflectiveSchemaTest.CatchallSchema.enumerable</code></a>, 
<a href="ReflectiveSchemaTest.CatchallSchema.html#list"><code>ReflectiveSchemaTest.CatchallSchema.list</code></a></dd>
</dl>
</li>
</ul>
<a id="testPrefix()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testPrefix</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testPrefix()
                throws java.lang.Exception</pre>
<div class="block">Test case for a bug where a Java string 'Abc' compared to a char 'Ab'
 would be truncated to the char precision and falsely match.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testTableMacroIsView()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testTableMacroIsView</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testTableMacroIsView()
                          throws java.lang.Exception</pre>
<div class="block">If a method returns a
 <code>ViewTable</code>.<code>ViewTableMacro</code>, then it
 should be expanded.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testTableMacro()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testTableMacro</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testTableMacro()
                    throws java.lang.Exception</pre>
<div class="block">Finds a table-macro using reflection.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testArrayOfBoxedPrimitives()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testArrayOfBoxedPrimitives</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testArrayOfBoxedPrimitives()</pre>
<div class="block">Table with single field as Integer[]</div>
</li>
</ul>
<a id="testArrayOfPrimitives()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testArrayOfPrimitives</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testArrayOfPrimitives()</pre>
<div class="block">Table with single field as int[]</div>
</li>
</ul>
<a id="testCustomBoxedScalar()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testCustomBoxedScalar</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testCustomBoxedScalar()</pre>
</li>
</ul>
<a id="testCustomBoxedSalarCalc()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testCustomBoxedSalarCalc</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testCustomBoxedSalarCalc()</pre>
</li>
</ul>
<a id="testDateCanCompare()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testDateCanCompare</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testDateCanCompare()</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-1569">[CALCITE-1569]
 Date condition can generates Integer == Integer, which is always
 false</a>.</div>
</li>
</ul>
<a id="testReflectiveSchemaInUnnamedPackage()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testReflectiveSchemaInUnnamedPackage</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testReflectiveSchemaInUnnamedPackage()
                                          throws java.lang.Exception</pre>
<div class="block">Test case for
 <a href="https://issues.apache.org/jira/browse/CALCITE-281">[CALCITE-1919]
 NPE when target in ReflectiveSchema belongs to the unnamed package</a>.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a id="testUnknownInOr()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>testUnknownInOr</h4>
<pre class="methodSignature">public&nbsp;void&nbsp;testUnknownInOr()</pre>
<div class="block">CALCITE-2611 unknown on one side of an or may lead to uncompilable code</div>
</li>
</ul>
</li>
</ul>
</section>
</li>
</ul>
</div>
</div>
</main>
<!-- ========= END OF CLASS DATA ========= -->
<footer role="contentinfo">
<nav role="navigation">
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a id="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a id="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../index.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/ReflectiveSchemaTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-all.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../../allclasses.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li><a href="#nested.class.summary">Nested</a>&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a id="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</nav>
<p class="legalCopy"><small>Copyright &#169; 2012&#x2013;2018 <a href="https://www.apache.org/">The Apache Software Foundation</a>. All rights reserved.</small></p>
</footer>
</body>
</html>
